# GitLab CI/CD Pipeline for B-Here Event Check-in System
stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"

# Build Docker image
build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building Docker image for B-Here application..."
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker build -t $IMAGE_NAME:latest .
    - echo "Pushing image to GitLab Container Registry..."
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:latest
  only:
    - main
    - develop
    - merge_requests

# Test the built image
test:
  stage: test
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Testing Docker image..."
    - docker pull $IMAGE_NAME:$IMAGE_TAG
    - echo "Running container health check..."
    - docker run --name test-container -d -p 5000:5000 $IMAGE_NAME:$IMAGE_TAG
    - sleep 10
    - docker exec test-container wget --quiet --tries=1 --spider http://localhost:5000 || (echo "Health check failed" && exit 1)
    - echo "Health check passed"
    - docker stop test-container
    - docker rm test-container
  dependencies:
    - build
  only:
    - main
    - develop
    - merge_requests

# Deploy to staging (example)
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Image ready at $IMAGE_NAME:$IMAGE_TAG"
    - echo "Use: docker run -p 5000:5000 -e DATABASE_URL=your_db_url $IMAGE_NAME:$IMAGE_TAG"
    # Add your deployment commands here
  environment:
    name: staging
    url: https://staging.your-domain.com
  dependencies:
    - build
    - test
  only:
    - develop
  when: manual

# Deploy to production (example)
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Image ready at $IMAGE_NAME:$IMAGE_TAG"
    - echo "Use: docker run -p 5000:5000 -e DATABASE_URL=your_db_url $IMAGE_NAME:$IMAGE_TAG"
    # Add your production deployment commands here
  environment:
    name: production
    url: https://your-domain.com
  dependencies:
    - build
    - test
  only:
    - main
  when: manual

# Cleanup old images (optional)
cleanup:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Cleanup job - remove old container images if needed"
    # Add cleanup commands here
  when: manual
  only:
    - main